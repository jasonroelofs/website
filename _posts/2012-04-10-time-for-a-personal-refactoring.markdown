---
layout: post
title: Time for a Personal Refactoring
published: true
---

As a developer, both professionally and personally, refactoring is in my blood. I'm always looking for ways to rebuild existing code or otherways make changes to improve the quality, testability, and maintainability of the code I'm working on. Without a constant urge to refactor code bases grow into unmaintainable behemoths that often grace the front page of [TheDailyWTF](http://www.thedailywtf.com). Refactoring is the admission that you're almost always wrong the first time through, and each successive time through the code you are not only improving the code but improving how you develop.

I'm still relatively new to the industry having only professionally developed for about six years now, but I've come to realize that the technical side of software development is only a small percentage of the actual job. [@brixen](http://twitter.com/brixen) said it best recently in his talk [Is Node.js Better](http://brixen.io/2012/4/9/is_node_js_better) that *Programming is a behavioral science*. I highly recommending reading the entire talk, but the gist is this: all software gets used by people, both who are technically inclined and those who aren't. Code is never written in a vaccuum and unless you always work alone and never release anything, your code will be read, used, and changed by other people. It's vitally important to never forget this; who you are and how you work is at times more important than your technical chops.

Software as a field and an industry moves blindingly fast. Techniques, tools, paradigms, and even languages change on a monthly basis,  requiring constant learning to keep up and to stay competitive in the market. Put another way, you have to constantly be refactoring what you know and how you learn to stay ahead of the wave, or risk getting overwhelmed. But this is just for the technical side of things, what about the rest of software development? If everything about this career is a constantly moving target, what else do we need to be learning, relearning, and refactoring as we grow?

**We need to refactor ourselves.** We need to constantly be aware how we communicate with others developers and those who are clueless even to what exactly we do, of our personal footprint in the industry, and how we contribute back to this amazing body of knowledge and do our part to further improve Computer Science as a whole, and make changes as necessary.

As hard as it can be to keep up with what's going on technically in this industry, it's exponentially harder to improve yourself. I have a tendency of being extremely hard headed, and I know personally just how hard it is for me to recognize when I'm wrong, much less to have the strenth to change my mind or how I act accordingly. Due to the nature of people and communication, it's impossible to take emotion out of any sort of communication, and this includes even the code you write. While you can't completely prevent anyone from taking offence to anything you do (this is the Internet, lets be real here), there are plenty of steps that can be taken to minimize potential conflict points, and the first is always how you communicate with your team-mates and users. What makes this particularly more difficult with technical minded people such as myself is we tend to think logically, without emotion, and with no hidden meanings. However it's human nature to look for and find hidden meanings in what's said, and personally I need to be much more mindful of this truth when communicating. The extra mental effort to ensure a given message isn't accidentally accusatory or blunt is much less than the effort required to fix any perceived conflicts and communication issues.

As you've probably noticed by now, I've got a new website and a new domain. After working with Wordpress for a few years, which did work just fine, it had gotten time to change things up a bit. Instead of just changing the design a bit, it was time for a complete change. As a developer I like having complete control over what I'm doing and the tools I use, and a WYSIWIG text editor on a web page just wasn't cutting it anymore. I've changed over to running a statically generated site using [Jekyll](https://github.com/mojombo/jekyll), with the source of the site being available on [Github](https://github.com/jameskilton/website). The design comes from the [Jekyll Bootstrap](http://jekyllbootstrap.com/) project and is built on [Twitter Bootstrap](http://twitter.github.com/bootstrap/). I can now work on the website using my two favorite tools: [Vim](http://vim.org) and a terminal.

Besides Wordpress being a "remote execution vulnerability that happens to contain a blog", I want to have a website I could make visible on Github because frankly **Github is my Resum√©**. I'm a huge proponent of Open Source and love how easy Github has made it not only in helping an contributing to existing projects but to start and run your own, as well as making your work visible to anyone who's interested.

Along with the new website, the change in domain is the first step in refactoring my online presence. As I get to know more people in the industry and more people get to either know me or start using my projects, I'm realizing more and more that putting yourself fully out there, while at times terrifying, is very important if you want people to take you seriously. Ignoring the obvious exception of _why, hiding behind a pseudonym eventually comes across as unprofessional and at times childish. As such, I am going to start retiring my old pseudonym "James Kilton", a name I created back in high school playing pen-and-paper RPGs with a bunch of friends. The new domain for my website is now http://www.jasonroelofs.com, and I'll be updating all links to the old domain to redirect here. As for my Github and Twitter accounts, they'll both stay @jameskilton for the time being until I figure out the best way to transition. It's time to put myself out there, to show the world who I am, warts and all.
